<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小站一会</title>
    <link>http://colin00.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录生活和自己。</description>
    <pubDate>Sun, 29 Oct 2017 11:32:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>烦闷的奔波</title>
      <link>http://colin00.github.io/2017/10/29/2017-10-29/</link>
      <guid>http://colin00.github.io/2017/10/29/2017-10-29/</guid>
      <pubDate>Sun, 29 Oct 2017 10:21:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/images/15092727743790.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你总是疲惫地仰望天空，&lt;br&gt;然而，你却看不到未来的银河。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="/images/15092727743790.jpg" alt=""></p><p>你总是疲惫地仰望天空，<br>然而，你却看不到未来的银河。<br><a id="more"></a> </p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=32897749&auto=0&height=66"></iframe><p>这几天为自己未来操心操力，时紧时松，也是够了。</p><p>不知道该碎碎语什么，逐渐发觉自己对世界的认知太过单纯，单纯地以为只有一颗理想主义的心就能获得理想主义的青睐，然后可以坚持原则，没用实质的东西跟别人表示我很行，并不意味着我不行啊，然而世界的话语体系是建立在“看得见”的事实之上，没有人真会耐心地等待你的努力，没有人会真地等你发挥你的潜力，所有成绩都是靠象征性的数字或者纸张来表达的。如果你没有纸张，你就没有成绩；如果你没有数字，你就没有成果。人的存在束缚在了这些零零碎碎的体系之中，然后我们以此为生，世世代代。</p><p>这就是现实啊，我是不是该摇醒我自己，看看周围，看看镜子中的自己。</p>]]></content:encoded>
      
      <comments>http://colin00.github.io/2017/10/29/2017-10-29/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何利用 Python 抓取 Twitter 的内容</title>
      <link>http://colin00.github.io/2017/10/20/2017-10-20-1/</link>
      <guid>http://colin00.github.io/2017/10/20/2017-10-20-1/</guid>
      <pubDate>Fri, 20 Oct 2017 07:05:35 GMT</pubDate>
      <description>
      
        &lt;p&gt;这篇总结一下初次使用 python 抓取推文的学习心得吧，其实也就是跑了下书中的代码。技术流程就是前文展示的那种，那么这里就按照这个流程来一遍吧。&lt;br&gt;（本部分涉及到书中的 Chap2-3 ）&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>这篇总结一下初次使用 python 抓取推文的学习心得吧，其实也就是跑了下书中的代码。技术流程就是前文展示的那种，那么这里就按照这个流程来一遍吧。<br>（本部分涉及到书中的 Chap2-3 ）<br><a id="more"></a> </p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="登入-Twitter-App-获取-key"><a href="#登入-Twitter-App-获取-key" class="headerlink" title="登入 Twitter App 获取 key"></a>登入 Twitter App 获取 key</h2><p>1、进入网站<br>2、新建应用<br>3、获取以下 key 值<br><code>consumer key</code>， <code>consumer secret</code>， <code>access token</code>， <code>access secret</code></p><h2 id="运行通用型认证代码"><a href="#运行通用型认证代码" class="headerlink" title="运行通用型认证代码"></a>运行通用型认证代码</h2><p>在指定位置填入刚才获得的 key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用于获得推特的准入许可</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> API</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> OAuthHandler</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_twitter_auth</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""启动 Twitter 验证</span></div><div class="line"><span class="string">    返回: tweepy.OAuthHandler 对象</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 下面的代码不知道如何解决，设置了环境变量，但是依然有错误，所以采用直接形式</span></div><div class="line">        <span class="comment">#consumer_key = os.environ['TWITTER_CONSUMER_KEY']</span></div><div class="line">        <span class="comment">#consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']</span></div><div class="line">        <span class="comment">#access_token = os.environ['TWITTER_ACCESS_TOKEN']</span></div><div class="line">        <span class="comment">#access_secret = os.environ['TWITTER_ACCESS_SECRET']</span></div><div class="line">        consumer_key = <span class="string">'自己填'</span></div><div class="line">        consumer_secret = <span class="string">'自己填'</span></div><div class="line">        access_token = <span class="string">'自己填'</span></div><div class="line">        access_secret = <span class="string">'自己填'</span></div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        sys.stderr.write(<span class="string">"TWITTER_* environment variables not set\n"</span>)</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    auth = OAuthHandler(consumer_key, consumer_secret)</div><div class="line">    auth.set_access_token(access_token, access_secret)</div><div class="line">    <span class="keyword">return</span> auth</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_twitter_client</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""启动 Twitter API 客户端</span></div><div class="line"><span class="string">    返回: tweepy.API 对象</span></div><div class="line"><span class="string">    """</span></div><div class="line">    auth = get_twitter_auth()</div><div class="line">    <span class="comment"># 这里要注意设置代理的网址</span></div><div class="line">    client = API(auth,proxy=<span class="string">"自己填"</span>)</div><div class="line">    <span class="keyword">return</span> client</div></pre></td></tr></table></figure></p><p>这样我们就获得了进入 Twitter 的许可证了，如书中这样把这块代码作为单独的文件，命名为 twitter_client.py </p><h1 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h1><p>许可证程序已经做好了，接下来是爬取数据，书中介绍了几种数据内容，安装处理数据的方式分为：文本内容、时间序列、关系和地理。但也可以理解为：静态数据和动态数据。静态数据主要包括：本人关注信息流、指定用户发布信息、指定用户粉丝和关注信息；动态数据主要是指定标签和内容的信息流（这里就涉及到不同用户的发布信息）</p><h2 id="静态数据-REST-API"><a href="#静态数据-REST-API" class="headerlink" title="静态数据 REST API"></a>静态数据 REST API</h2><h3 id="本人主页关注信息流：twitter-get-home-timeline-py"><a href="#本人主页关注信息流：twitter-get-home-timeline-py" class="headerlink" title="本人主页关注信息流：twitter_get_home_timeline.py"></a>本人主页关注信息流：twitter_get_home_timeline.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用于获取本人关注的信息流</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> Cursor</div><div class="line"><span class="keyword">from</span> twitter_client <span class="keyword">import</span> get_twitter_client</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    client = get_twitter_client()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'home_timeline.jsonl'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> Cursor(client.home_timeline, count=<span class="number">200</span>, include_rts=<span class="keyword">True</span>).pages(<span class="number">4</span>):</div><div class="line">            <span class="keyword">for</span> status <span class="keyword">in</span> page:</div><div class="line">                <span class="comment"># Process a single status</span></div><div class="line">                f.write(json.dumps(status._json)+<span class="string">"\n"</span>)</div></pre></td></tr></table></figure><h3 id="指定用户发布信息流：twitter-get-user-timeline-py"><a href="#指定用户发布信息流：twitter-get-user-timeline-py" class="headerlink" title="指定用户发布信息流：twitter_get_user_timeline.py"></a>指定用户发布信息流：twitter_get_user_timeline.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取指定用户的信息流</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> Cursor</div><div class="line"><span class="keyword">from</span> twitter_client <span class="keyword">import</span> get_twitter_client</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Usage:"</span>)</div><div class="line">    print(<span class="string">"python &#123;&#125; &lt;username&gt;"</span>.format(sys.argv[<span class="number">0</span>]))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">        usage()</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    user = sys.argv[<span class="number">1</span>]</div><div class="line">    client = get_twitter_client()</div><div class="line"></div><div class="line">    fname = <span class="string">"user_timeline_%s.jsonl"</span> % user</div><div class="line">    <span class="keyword">with</span> open(fname, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="comment"># 设定到了最大值：3200条</span></div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> Cursor(client.user_timeline, screen_name=user, count=<span class="number">200</span>).pages(<span class="number">16</span>):</div><div class="line">            <span class="keyword">for</span> status <span class="keyword">in</span> page:</div><div class="line">                f.write(json.dumps(status._json)+<span class="string">"\n"</span>)</div></pre></td></tr></table></figure><h3 id="指定用户粉丝信息和关注信息：twitter-get-user-py"><a href="#指定用户粉丝信息和关注信息：twitter-get-user-py" class="headerlink" title="指定用户粉丝信息和关注信息：twitter_get_user.py"></a>指定用户粉丝信息和关注信息：twitter_get_user.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取指定用户的粉丝和关注信息</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> Cursor</div><div class="line"><span class="keyword">from</span> twitter_client <span class="keyword">import</span> get_twitter_client</div><div class="line"></div><div class="line"><span class="comment"># 设定了最大值</span></div><div class="line">MAX_FRIENDS = <span class="number">15000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Usage:"</span>)</div><div class="line">    print(<span class="string">"python &#123;&#125; &lt;username&gt;"</span>.format(sys.argv[<span class="number">0</span>]))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginate</span><span class="params">(items, n)</span>:</span></div><div class="line">    <span class="string">"""Generate n-sized chunks from items"""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(items), n):</div><div class="line">        <span class="keyword">yield</span> items[i:i+n]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">        usage()</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    screen_name = sys.argv[<span class="number">1</span>]</div><div class="line">    client = get_twitter_client()</div><div class="line">    dirname = <span class="string">"users/&#123;&#125;"</span>.format(screen_name)</div><div class="line">    max_pages = math.ceil(MAX_FRIENDS / <span class="number">5000</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        os.makedirs(dirname, mode=<span class="number">0o755</span>, exist_ok=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">except</span> OSError:</div><div class="line">        print(<span class="string">"Directory &#123;&#125; already exists"</span>.format(dirname))</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"Error while creating directory &#123;&#125;"</span>.format(dirname))</div><div class="line">        print(e)</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 获得指定用户的粉丝信息</span></div><div class="line">    fname = <span class="string">"users/&#123;&#125;/followers.jsonl"</span>.format(screen_name)</div><div class="line">    <span class="keyword">with</span> open(fname, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> followers <span class="keyword">in</span> Cursor(client.followers_ids, screen_name=screen_name).pages(max_pages):</div><div class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> paginate(followers, <span class="number">100</span>):</div><div class="line">                users = client.lookup_users(user_ids=chunk)</div><div class="line">                <span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">                    f.write(json.dumps(user._json)+<span class="string">"\n"</span>)</div><div class="line">            <span class="keyword">if</span> len(followers) == <span class="number">5000</span>:</div><div class="line">                print(<span class="string">"More results available. Sleeping for 60 seconds to avoid rate limit"</span>)</div><div class="line">                time.sleep(<span class="number">60</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 获取指定用户的关注信息</span></div><div class="line">    fname = <span class="string">"users/&#123;&#125;/friends.jsonl"</span>.format(screen_name)</div><div class="line">    <span class="keyword">with</span> open(fname, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> friends <span class="keyword">in</span> Cursor(client.friends_ids, screen_name=screen_name).pages(max_pages):</div><div class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> paginate(friends, <span class="number">100</span>):</div><div class="line">                users = client.lookup_users(user_ids=chunk)</div><div class="line">                <span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">                    f.write(json.dumps(user._json)+<span class="string">"\n"</span>)</div><div class="line">            <span class="keyword">if</span> len(friends) == <span class="number">5000</span>:</div><div class="line">                print(<span class="string">"More results available. Sleeping for 60 seconds to avoid rate limit"</span>)</div><div class="line">                time.sleep(<span class="number">60</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 获取用户信息</span></div><div class="line">    fname = <span class="string">"users/&#123;&#125;/user_profile.json"</span>.format(screen_name)</div><div class="line">    <span class="keyword">with</span> open(fname, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        profile = client.get_user(screen_name=screen_name)</div><div class="line">        f.write(json.dumps(profile._json, indent=<span class="number">4</span>))</div></pre></td></tr></table></figure><h3 id="指定内容的检索信息"><a href="#指定内容的检索信息" class="headerlink" title="指定内容的检索信息"></a>指定内容的检索信息</h3><h2 id="动态数据-Streaming-API"><a href="#动态数据-Streaming-API" class="headerlink" title="动态数据 Streaming API"></a>动态数据 Streaming API</h2><h3 id="指定标签和内容的信息流：twitter-streaming-py"><a href="#指定标签和内容的信息流：twitter-streaming-py" class="headerlink" title="指定标签和内容的信息流：twitter_streaming.py"></a>指定标签和内容的信息流：twitter_streaming.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取指定标签和内容的信息流</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> Stream</div><div class="line"><span class="keyword">from</span> tweepy.streaming <span class="keyword">import</span> StreamListener</div><div class="line"><span class="keyword">from</span> twitter_client <span class="keyword">import</span> get_twitter_auth</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span><span class="params">(StreamListener)</span>:</span></div><div class="line">    <span class="string">"""Custom StreamListener for streaming Twitter data."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fname)</span>:</span></div><div class="line">        safe_fname = format_filename(fname)</div><div class="line">        self.outfile = <span class="string">"stream_%s.jsonl"</span> % safe_fname</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_data</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">with</span> open(self.outfile, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write(data)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</div><div class="line">            sys.stderr.write(<span class="string">"Error on_data: &#123;&#125;\n"</span>.format(e))</div><div class="line">            time.sleep(<span class="number">5</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_error</span><span class="params">(self, status)</span>:</span></div><div class="line">        <span class="keyword">if</span> status == <span class="number">420</span>:</div><div class="line">            sys.stderr.write(<span class="string">"Rate limit exceeded\n"</span>.format(status))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            sys.stderr.write(<span class="string">"Error &#123;&#125;\n"</span>.format(status))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_filename</span><span class="params">(fname)</span>:</span></div><div class="line">    <span class="string">"""Convert fname into a safe string for a file name.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Return: string</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(convert_valid(one_char) <span class="keyword">for</span> one_char <span class="keyword">in</span> fname)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_valid</span><span class="params">(one_char)</span>:</span></div><div class="line">    <span class="string">"""Convert a character into '_' if "invalid".</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Return: string</span></div><div class="line"><span class="string">    """</span></div><div class="line">    valid_chars = <span class="string">"-_.%s%s"</span> % (string.ascii_letters, string.digits)</div><div class="line">    <span class="keyword">if</span> one_char <span class="keyword">in</span> valid_chars:</div><div class="line">        <span class="keyword">return</span> one_char</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'_'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    query = sys.argv[<span class="number">1</span>:] <span class="comment"># list of CLI arguments</span></div><div class="line">    query_fname = <span class="string">' '</span>.join(query) <span class="comment"># string</span></div><div class="line">    auth = get_twitter_auth()</div><div class="line">    twitter_stream = Stream(auth, CustomListener(query_fname))</div><div class="line">    twitter_stream.filter(track=query, <span class="keyword">async</span>=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><h1 id="数据清理和预处理"><a href="#数据清理和预处理" class="headerlink" title="数据清理和预处理"></a>数据清理和预处理</h1><h1 id="建模和分析"><a href="#建模和分析" class="headerlink" title="建模和分析"></a>建模和分析</h1><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><p><code>get_twitter_auth()</code>  获得许可证<br><code>get_twitter_client()</code> 登入服务器</p><p>小实验：获取自己主页时间线的前十条<br>tweepy.Cursor<br>tweepy.Status</p><p>小实验2: 获取主页200条并存入 json<br>自己主页最多 800条；<br>别人主页最多 3200条；</p><h2 id="tweet-的数据结构"><a href="#tweet-的数据结构" class="headerlink" title="tweet 的数据结构"></a>tweet 的数据结构</h2><h2 id="streaming-API"><a href="#streaming-API" class="headerlink" title="streaming API"></a>streaming API</h2><p>CustomListener class<br>    StreamListener<br>    on_data() on_error()<br>#19thCPC #19thPartyCongress</p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>标签频率；<br>推文标签分布；<br>提及人频率；</p><h2 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h2><p><strong>Tokenization</strong> 分词<br><strong>stop word removal</strong> 停顿词</p><h2 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h2><h2 id="粉丝状况"><a href="#粉丝状况" class="headerlink" title="粉丝状况"></a>粉丝状况</h2><p> 在量很大的情况下，选择 set 或者 numpy 来计算；</p><h2 id="测量影响力"><a href="#测量影响力" class="headerlink" title="测量影响力"></a>测量影响力</h2><p><strong>Term Frequency (TF)</strong><br><strong>Inverse Document Frequency (IDF)</strong><br><strong>TF-IDF statistics</strong></p><h2 id="评论关系"><a href="#评论关系" class="headerlink" title="评论关系"></a>评论关系</h2><p>未完全检测到，可能跟数据有关</p><h2 id="地图绘制"><a href="#地图绘制" class="headerlink" title="地图绘制"></a>地图绘制</h2>]]></content:encoded>
      
      <comments>http://colin00.github.io/2017/10/20/2017-10-20-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>怎么理解 Python 爬虫</title>
      <link>http://colin00.github.io/2017/10/20/2017-10-20/</link>
      <guid>http://colin00.github.io/2017/10/20/2017-10-20/</guid>
      <pubDate>Fri, 20 Oct 2017 02:33:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;由于自己的研究需要爬取 Twitter 和 Facebook 的社交数据，但自己又没有真正爬取过，那么我就来好好学习一下啦。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>由于自己的研究需要爬取 Twitter 和 Facebook 的社交数据，但自己又没有真正爬取过，那么我就来好好学习一下啦。</p><a id="more"></a> <h1 id="选择一本书"><a href="#选择一本书" class="headerlink" title="选择一本书"></a>选择一本书</h1><p>我选择了《Mastering social media mining with Python》这本书，里面的讲解还是很直接的，干货多方便我快速掌握。本书的代码都能在网站上获取</p><h1 id="了解一些理论"><a href="#了解一些理论" class="headerlink" title="了解一些理论"></a>了解一些理论</h1><p>第一章是 Social media - challenges and opportunities ，讲的是一些爬虫的基本知识，还有一些技术展示，重在培养对爬虫的兴趣。</p><h2 id="对社交媒体的理解"><a href="#对社交媒体的理解" class="headerlink" title="对社交媒体的理解"></a>对社交媒体的理解</h2><p>Internet-based applications<br>User-generated content<br>Networking</p><h2 id="本书要解决的问题"><a href="#本书要解决的问题" class="headerlink" title="本书要解决的问题"></a>本书要解决的问题</h2><p>how to extract useful knowledge from the data coming from the social media?</p><p><strong>knowledge hierarchy</strong></p><h2 id="社交媒体挖掘的机遇"><a href="#社交媒体挖掘的机遇" class="headerlink" title="社交媒体挖掘的机遇"></a>社交媒体挖掘的机遇</h2><p><strong>Application Programming Interface (API)</strong><br><strong>Representational State Transfer (REST)</strong><br><strong>RESTful API</strong></p><h2 id="社交媒体挖掘的挑战"><a href="#社交媒体挖掘的挑战" class="headerlink" title="社交媒体挖掘的挑战"></a>社交媒体挖掘的挑战</h2><p><strong>big data</strong><br><strong>structured data</strong><br><strong>unstructured data</strong><br> <strong>semi-structured data</strong><br> <strong>data integrity</strong><br> <strong>data access</strong><br> <strong>research and development (R&amp;D) processes</strong></p><h2 id="社交媒体挖掘的技术流程"><a href="#社交媒体挖掘的技术流程" class="headerlink" title="社交媒体挖掘的技术流程"></a>社交媒体挖掘的技术流程</h2><p>1、验证 Authentication<br>2、数据收集 Data collection<br>3、数据清理和预处理 Data cleaning and pre-processing<br>4、建模和分析 Modeling and analysis<br>5、结果展示 Result presentation</p><p><img src="/images/15084668916933.jpg" alt=""></p><p><strong>Open Authorization (OAuth)</strong><br>a user, consumer (our application), and resource provider (the social media platform).</p><p><strong>Text mining</strong><br><strong>Graph mining</strong></p><h2 id="Python-tools-for-data-science"><a href="#Python-tools-for-data-science" class="headerlink" title="Python tools for data science"></a>Python tools for data science</h2><h3 id="Python-的优点"><a href="#Python-的优点" class="headerlink" title="Python 的优点"></a>Python 的优点</h3><p>Declarative and intuitive syntax<br>Rich ecosystem for data processing<br>Efficiency</p><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><p>3.4+ and 3.5+<br>pip and virtualenv<br>virtualenv 管理虚拟环境和安装依赖环境<br>Conda, Anaconda, and Miniconda</p><h3 id="数据分析工具"><a href="#数据分析工具" class="headerlink" title="数据分析工具"></a>数据分析工具</h3><p>NumPy and pandas<br><strong>Naming conventions</strong><br>numpy as np; pandas as pd; </p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p><strong>Supervised learning</strong><br><strong>Naive Bayes (NB)</strong><br><strong>Support Vector Machine (SVM)</strong><br><strong>Neural Networks (NN)</strong><br><strong>training data</strong><br><strong>test data</strong><br><strong>Unsupervised learning</strong></p>]]></content:encoded>
      
      <comments>http://colin00.github.io/2017/10/20/2017-10-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>终于弄好了～</title>
      <link>http://colin00.github.io/2017/10/19/hello-world/</link>
      <guid>http://colin00.github.io/2017/10/19/hello-world/</guid>
      <pubDate>Thu, 19 Oct 2017 06:05:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;花了一点时间弄这个，可以建一个自己的博客也是很好了。&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>花了一点时间弄这个，可以建一个自己的博客也是很好了。</p>]]></content:encoded>
      
      <comments>http://colin00.github.io/2017/10/19/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
